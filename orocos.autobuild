configuration_option 'rtt_target', 'string',
    :default => 'gnulinux',
    :possible_values => %w{gnulinux xenomai macosx},
    :doc => "the target operating system for Orocos/RTT (gnulinux, xenomai, or macosx)"

configuration_option 'rtt_corba_implementation', 'string',
    :default => "omniorb",
    :lowercase => true,
    :possible_values => %w{none tao omniorb},
    :doc => ["which CORBA implementation should the RTT use ?",
             "Answer 'none' to disable CORBA, otherwise pick either tao or omniorb"]

cmake_package 'rtt' do |pkg|
    pkg.always_reconfigure = true
    pkg.doc_dir = File.join('doc', 'api', 'html')
    pkg.with_doc('docapi')

    
    target = Autoproj.config.get('rtt_target')
    env_set 'OROCOS_TARGET', target
    pkg.define "OROCOS_TARGET", target

    env_add 'CMAKE_PREFIX_PATH', pkg.prefix

    # Used by the oroGen handler
    pkg.provides "pkgconfig/orocos-rtt-#{target}"
    Autoproj.config.get('rtt_corba_implementation')

    # Disable building the test suite because it needs a lot of time and memory
    pkg.with_tests
    pkg.define 'BUILD_TESTING', pkg.test_utility.enabled?

    corba = Autoproj.config.get('rtt_corba_implementation')
    if corba == 'none'
        Autobuild::Orogen.corba = false
        pkg.define "ENABLE_CORBA", "OFF"
    else
        Autobuild::Orogen.corba = true
        pkg.define "ENABLE_CORBA", "YES"
        pkg.define "CORBA_IMPLEMENTATION", corba.upcase
        pkg.depends_on corba.downcase
    end
end

# Install the OCL only to get the task browser
cmake_package 'ocl' do |pkg|
    pkg.always_reconfigure = true
    pkg.doc_dir = File.join('doc', 'api', 'html')
    pkg.with_doc('docapi')

    target = Autoproj.config.get('rtt_target')
    pkg.define "OROCOS_TARGET", target
end

cmake_package "log4cpp"

ruby_package 'tools/metaruby'
# For ROS compatibility, ROS does not like paths in package names
metapackage 'metaruby', 'tools/metaruby'
# The Autoproj API does not allow to put a package higher in the hierarchy, only
# lower. Trick it.
Autoproj.manifest.moved_packages['tools/metaruby'] = 'metaruby'

ruby_package 'utilrb'
cmake_package 'utilmm' do |pkg|
    pkg.doc_dir = File.join("doc", "html")
end
remove_from_default 'utilmm'
cmake_package 'typelib' do |pkg|
    pkg.define "RUBY_EXECUTABLE", Autoproj::CmdLine.ruby_executable
    pkg.env_set 'TYPELIB_PLUGIN_PATH', File.join(pkg.prefix, 'lib', 'typelib')

    # Enable the castxml importer by adding the following in autoproj/init.rb
    #
    #   Autoproj.config.set 'typelib_cxx_loader', 'castxml'
    cxx_loader = Autoproj.config.get 'typelib_cxx_loader', 'gccxml'
    pkg.define 'BUILD_CLANG_TLB_IMPORTER', (cxx_loader == 'clang')
    pkg.env_set 'TYPELIB_CXX_LOADER', cxx_loader
    pkg.post_import do
        # remove_dependency is post-1.9.0
        m = if pkg.respond_to?(:remove_dependency)
                pkg.method(:remove_dependency)
            else pkg.os_packages.method(:delete)
            end
        
        if cxx_loader == 'clang'
	    pkg.message "%s: using the clang importer"
            m.call 'gccxml'
            m.call 'castxml'
        elsif cxx_loader == 'castxml'
	    pkg.message "%s: using the castxml importer"
            m.call 'gccxml'
            m.call 'clang-3.4'
        else
	    pkg.message "%s: using the gccxml importer"
            m.call 'castxml'
            m.call 'clang-3.4'
        end
    end
end
cmake_package 'castxml'
remove_from_default 'castxml'
cmake_package 'rtt_typelib'
ruby_package 'orogen'
cmake_package 'stdint_typekit'
